[gd_scene load_steps=8 format=2]

[ext_resource path="res://shinobeats.png" type="Texture" id=1]
[ext_resource path="res://press_space.png" type="Texture" id=2]
[ext_resource path="res://titlescreen.gd" type="Script" id=3]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(1);
uniform float line_thickness : hint_range(0, 10) = 3.0;

void fragment(){
//	COLOR = texture(TEXTURE, UV);
//
//	if (COLOR.a != 0f) {
//		COLOR.r = 255f;
//		COLOR.g = 255f;
//		COLOR.b = 255f;
//	}
	
	vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
	
	float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
	outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
	outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
	outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
	outline = min(outline, 1.0);
	
	vec4 color = texture(TEXTURE, UV);
	COLOR = mix(color, line_color, outline - color.a);
	
	if (sin(TIME*4f) > .5){
		COLOR.a = 0f
	}
		
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/line_color = Color( 1, 1, 1, 1 )
shader_param/line_thickness = 3.0

[sub_resource type="Shader" id=1]
code = "/*
	Glitch Effect Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type canvas_item;

// 振動の強さ
uniform float shake_power = 0.03;
// 振動率
uniform float shake_rate : hint_range( 0.0, 1.0 ) = 0.2;
// 振動速度
uniform float shake_speed = 5.0;
// 振動ブロックサイズ
uniform float shake_block_size = 30.5;
// 色の分離率
uniform float shake_color_rate : hint_range( 0.0, 1.0 ) = 0.01;

float random( float seed )
{
	return fract( 543.2543 * sin( dot( vec2( seed, seed ), vec2( 3525.46, -54.3415 ) ) ) );
}

void fragment( )
{
	float enable_shift = float(
		random( trunc( TIME * shake_speed ) )
	<	shake_rate
	);

	vec2 fixed_uv = SCREEN_UV;
	fixed_uv.x += (
		random(
			( trunc( SCREEN_UV.y * shake_block_size ) / shake_block_size )
		+	TIME
		) - 0.5
	) * shake_power * enable_shift;

	vec4 pixel_color = textureLod( SCREEN_TEXTURE, fixed_uv, 0.0 );
	pixel_color.r = mix(
		pixel_color.r
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( shake_color_rate, 0.0 ), 0.0 ).r
	,	enable_shift
	);
	pixel_color.b = mix(
		pixel_color.b
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( -shake_color_rate, 0.0 ), 0.0 ).b
	,	enable_shift
	);
	COLOR = pixel_color;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/shake_power = 0.03
shader_param/shake_rate = 0.2
shader_param/shake_speed = 5.0
shader_param/shake_block_size = 30.5
shader_param/shake_color_rate = 0.01

[node name="titlescreen" type="Node2D"]
script = ExtResource( 3 )

[node name="shinobeats_text" type="Sprite" parent="."]
position = Vector2( 525.841, 239.26 )
texture = ExtResource( 1 )

[node name="press_space_text" type="Sprite" parent="."]
material = SubResource( 4 )
position = Vector2( 545.238, 445.359 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 2 )

[node name="shader_area" type="ColorRect" parent="."]
material = SubResource( 2 )
margin_left = 195.236
margin_top = 158.397
margin_right = 235.236
margin_bottom = 198.397
rect_scale = Vector2( 16.4406, 3.73546 )
color = Color( 1, 1, 1, 0 )
__meta__ = {
"_edit_use_anchors_": false
}
